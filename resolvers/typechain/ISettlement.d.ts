/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISettlementInterface extends ethers.utils.Interface {
  functions: {
    "availableCredit(address)": FunctionFragment;
    "decreaseAvailableCredit(address,uint256)": FunctionFragment;
    "feeBank()": FunctionFragment;
    "increaseAvailableCredit(address,uint256)": FunctionFragment;
    "settleOrders(bytes)": FunctionFragment;
    "takerInteraction(tuple,bytes32,address,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "availableCredit",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAvailableCredit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeBank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAvailableCredit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settleOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "takerInteraction",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "availableCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAvailableCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeBank", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAvailableCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerInteraction",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISettlement extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISettlementInterface;

  functions: {
    availableCredit(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "availableCredit(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decreaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeBank(overrides?: CallOverrides): Promise<[string]>;

    "feeBank()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settleOrders(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "settleOrders(bytes)"(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takerInteraction(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,address,uint256,uint256,uint256,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  availableCredit(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "availableCredit(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decreaseAvailableCredit(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAvailableCredit(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeBank(overrides?: CallOverrides): Promise<string>;

  "feeBank()"(overrides?: CallOverrides): Promise<string>;

  increaseAvailableCredit(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAvailableCredit(address,uint256)"(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settleOrders(
    order: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "settleOrders(bytes)"(
    order: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takerInteraction(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    orderHash: BytesLike,
    taker: string,
    makingAmount: BigNumberish,
    takingAmount: BigNumberish,
    remainingMakingAmount: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,address,uint256,uint256,uint256,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    orderHash: BytesLike,
    taker: string,
    makingAmount: BigNumberish,
    takingAmount: BigNumberish,
    remainingMakingAmount: BigNumberish,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    availableCredit(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableCredit(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decreaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeBank(overrides?: CallOverrides): Promise<string>;

    "feeBank()"(overrides?: CallOverrides): Promise<string>;

    increaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "increaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settleOrders(order: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "settleOrders(bytes)"(
      order: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    takerInteraction(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,address,uint256,uint256,uint256,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    availableCredit(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "availableCredit(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decreaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeBank(overrides?: CallOverrides): Promise<BigNumber>;

    "feeBank()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settleOrders(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "settleOrders(bytes)"(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takerInteraction(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,address,uint256,uint256,uint256,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    availableCredit(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "availableCredit(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decreaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeBank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeBank()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAvailableCredit(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAvailableCredit(address,uint256)"(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settleOrders(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "settleOrders(bytes)"(
      order: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takerInteraction(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "takerInteraction((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,address,uint256,uint256,uint256,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      orderHash: BytesLike,
      taker: string,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish,
      remainingMakingAmount: BigNumberish,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
