/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IOrderMixinInterface extends ethers.utils.Interface {
  functions: {
    "bitInvalidatorForOrder(address,uint256)": FunctionFragment;
    "bitsInvalidateForOrder(uint256,uint256)": FunctionFragment;
    "cancelOrder(uint256,bytes32)": FunctionFragment;
    "cancelOrders(uint256[],bytes32[])": FunctionFragment;
    "fillContractOrder(tuple,bytes,uint256,uint256,address,bytes)": FunctionFragment;
    "fillContractOrderWithPermit(tuple,bytes,uint256,uint256,address,bytes,bytes)": FunctionFragment;
    "fillOrder(tuple,bytes32,bytes32,uint256,uint256)": FunctionFragment;
    "fillOrderTo(tuple,bytes32,bytes32,uint256,uint256,address,bytes)": FunctionFragment;
    "fillOrderToExt(tuple,bytes32,bytes32,uint256,uint256,address,bytes,bytes)": FunctionFragment;
    "fillOrderToWithPermit(tuple,bytes32,bytes32,uint256,uint256,address,bytes,bytes)": FunctionFragment;
    "hashOrder(tuple)": FunctionFragment;
    "rawRemainingInvalidatorForOrder(address,bytes32)": FunctionFragment;
    "remainingInvalidatorForOrder(address,bytes32)": FunctionFragment;
    "simulate(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bitInvalidatorForOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bitsInvalidateForOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrders",
    values: [BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrder",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillContractOrderWithPermit",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrder",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderTo",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderToExt",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderToWithPermit",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashOrder",
    values: [
      {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rawRemainingInvalidatorForOrder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "remainingInvalidatorForOrder",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulate",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bitInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bitsInvalidateForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillContractOrderWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fillOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderToExt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderToWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawRemainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingInvalidatorForOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "simulate", data: BytesLike): Result;

  events: {
    "OrderFilled(bytes32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderFilled"): EventFragment;
}

export class IOrderMixin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IOrderMixinInterface;

  functions: {
    bitInvalidatorForOrder(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    "bitInvalidatorForOrder(address,uint256)"(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;

    bitsInvalidateForOrder(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bitsInvalidateForOrder(uint256,uint256)"(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelOrder(uint256,bytes32)"(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrders(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelOrders(uint256[],bytes32[])"(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillContractOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillContractOrderWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillContractOrderWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrderTo(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillOrderTo((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrderToExt(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillOrderToExt((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillOrderToWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fillOrderToWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string] & { orderHash: string }>;

    rawRemainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingRaw: BigNumber }>;

    "rawRemainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remainingRaw: BigNumber }>;

    remainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    "remainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { remaining: BigNumber }>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "simulate(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  bitInvalidatorForOrder(
    maker: string,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bitInvalidatorForOrder(address,uint256)"(
    maker: string,
    slot: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bitsInvalidateForOrder(
    makerTraits: BigNumberish,
    additionalMask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bitsInvalidateForOrder(uint256,uint256)"(
    makerTraits: BigNumberish,
    additionalMask: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    makerTraits: BigNumberish,
    orderHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelOrder(uint256,bytes32)"(
    makerTraits: BigNumberish,
    orderHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrders(
    makerTraits: BigNumberish[],
    orderHashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelOrders(uint256[],bytes32[])"(
    makerTraits: BigNumberish[],
    orderHashes: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillContractOrder(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    signature: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    signature: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillContractOrderWithPermit(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    signature: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    permit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillContractOrderWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    signature: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    permit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrder(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrderTo(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillOrderTo((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrderToExt(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    extension: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillOrderToExt((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    extension: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillOrderToWithPermit(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    permit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fillOrderToWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    r: BytesLike,
    vs: BytesLike,
    amount: BigNumberish,
    takerTraits: BigNumberish,
    target: string,
    interaction: BytesLike,
    permit: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashOrder(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
    order: {
      salt: BigNumberish;
      maker: BigNumberish;
      receiver: BigNumberish;
      makerAsset: BigNumberish;
      takerAsset: BigNumberish;
      makingAmount: BigNumberish;
      takingAmount: BigNumberish;
      makerTraits: BigNumberish;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  rawRemainingInvalidatorForOrder(
    maker: string,
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rawRemainingInvalidatorForOrder(address,bytes32)"(
    maker: string,
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  remainingInvalidatorForOrder(
    maker: string,
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "remainingInvalidatorForOrder(address,bytes32)"(
    maker: string,
    orderHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  simulate(
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "simulate(address,bytes)"(
    target: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bitInvalidatorForOrder(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bitInvalidatorForOrder(address,uint256)"(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bitsInvalidateForOrder(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bitsInvalidateForOrder(uint256,uint256)"(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(uint256,bytes32)"(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrders(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrders(uint256[],bytes32[])"(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillContractOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillContractOrderWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillContractOrderWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderTo(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillOrderTo((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderToExt(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillOrderToExt((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    fillOrderToWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    "fillOrderToWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string] & {
        makingAmount: BigNumber;
        takingAmount: BigNumber;
        orderHash: string;
      }
    >;

    hashOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    rawRemainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawRemainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "simulate(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OrderFilled(
      orderHash: null,
      makingAmount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { orderHash: string; makingAmount: BigNumber }
    >;
  };

  estimateGas: {
    bitInvalidatorForOrder(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bitInvalidatorForOrder(address,uint256)"(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bitsInvalidateForOrder(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bitsInvalidateForOrder(uint256,uint256)"(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelOrder(uint256,bytes32)"(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrders(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelOrders(uint256[],bytes32[])"(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillContractOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillContractOrderWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillContractOrderWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrderTo(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillOrderTo((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrderToExt(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillOrderToExt((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillOrderToWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fillOrderToWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rawRemainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rawRemainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    remainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "remainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "simulate(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bitInvalidatorForOrder(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bitInvalidatorForOrder(address,uint256)"(
      maker: string,
      slot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bitsInvalidateForOrder(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bitsInvalidateForOrder(uint256,uint256)"(
      makerTraits: BigNumberish,
      additionalMask: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOrder(uint256,bytes32)"(
      makerTraits: BigNumberish,
      orderHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrders(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOrders(uint256[],bytes32[])"(
      makerTraits: BigNumberish[],
      orderHashes: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillContractOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillContractOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillContractOrderWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillContractOrderWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      signature: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderTo(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillOrderTo((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderToExt(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillOrderToExt((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      extension: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillOrderToWithPermit(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fillOrderToWithPermit((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),bytes32,bytes32,uint256,uint256,address,bytes,bytes)"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      r: BytesLike,
      vs: BytesLike,
      amount: BigNumberish,
      takerTraits: BigNumberish,
      target: string,
      interaction: BytesLike,
      permit: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashOrder(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOrder((uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))"(
      order: {
        salt: BigNumberish;
        maker: BigNumberish;
        receiver: BigNumberish;
        makerAsset: BigNumberish;
        takerAsset: BigNumberish;
        makingAmount: BigNumberish;
        takingAmount: BigNumberish;
        makerTraits: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rawRemainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rawRemainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingInvalidatorForOrder(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingInvalidatorForOrder(address,bytes32)"(
      maker: string,
      orderHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simulate(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "simulate(address,bytes)"(
      target: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
